# List to store chat messages
chat_messages = []

@app.route('/send_message', methods=['POST'])
def send_message():
    user_input = request.form.get('user_input')

    if user_input:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        formatted_message = f'[{timestamp}] User: {user_input}'

        chat_messages.append(formatted_message)

        return jsonify({'status': 'success'})
    else:
        return jsonify({'status': 'error', 'message': 'Empty message'})


@app.route('/get_messages')
def get_messages():
    return jsonify({'messages': chat_messages})

def chatbot_response(user_message):
    user_message_lower = user_message.lower()

    if any(greeting in user_message_lower for greeting in ['hi', 'hello', 'hey']):
        return "Greetings! How can I help you?"

    elif 'how are you' in user_message_lower:
        return "I'm just a chatbot, but thanks for asking!"

    elif any(greeting in user_message_lower for greeting in ['bye', 'goodbye']):
        return "Bye! Have a good day!"

    elif 'language' in user_message_lower:
        return "I currently understand only English. Please use Google Translate if needed."

    elif 'paper bag' in user_message_lower:
        reference_link = 'https://www.example.com/products/paper-bag'
        return f"Sure! You can find details about the paper bag [here]({reference_link}). <br> Are there any other inquiries?"

    elif 'polymailer' in user_message_lower:
        reference_link = 'https://www.example.com/products/polymailer'
        return f"Sure! You can find details about the polymailer [here]({reference_link}). <br> Are there any other inquiries?"

    elif 'plastic bag' in user_message_lower:
        reference_link = 'https://www.example.com/products/plastic-bag'
        return f"Sure! You can find details about the plastic bag [here]({reference_link}). <br> Are there any other inquiries?"

    else:
        if not is_english(user_message_lower):
            return "Sorry, I only understand English. Please use Google Translate and send the response. Thank you."

        return "I'm not sure how to respond to that. Can you please be more specific?"

def is_english(text):
    try:
        text.encode(encoding='utf-8').decode('ascii')
    except UnicodeDecodeError:
        return False
    else:
        return True


@app.route('/chatbot_records')
def chatbot_records():
    # Retrieve chat messages from the database
    messages = retrieve_chat_messages()

    # Pre-process messages to include an 'is_user' flag
    processed_messages = []
    is_user = True  # Assume the first message is from the user

    for message in messages:
        processed_messages.append({'content': message, 'is_user': is_user})
        is_user = not is_user  # Toggle between user and chatbot


    # Render the chatbot_records.html template and pass the messages to it
    return render_template('backend/chatbot_records.html', messages=processed_messages)



@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.form['user_message']

    # Generate chatbot response
    response = chatbot_response(user_message)

    # Append user and chatbot messages to chat_messages list
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    user_formatted_message = f'[{timestamp}] User: {user_message}'
    chat_messages.append(user_formatted_message)

    chatbot_formatted_message = f'[{timestamp}] Chatbot: {response}'
    chat_messages.append(chatbot_formatted_message)

    # Store messages using shelves
    store_chat_messages(chat_messages)

    return response
